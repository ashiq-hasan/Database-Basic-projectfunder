-- Datenbanken Praktikum WS 2019/20
-- Aufgabe 4

-- Create Table:

CREATE TABLE Benutzer (
  	Email VARCHAR(50) NOT NULL,
  	Name VARCHAR(50) NOT NULL,
  	Profil VARCHAR(100),
  	PRIMARY KEY (Email)
);

CREATE TABLE Kategorien (
  	Kategorie_id SMALLINT NOT NULL AUTO_INCREMENT,
  	Name VARCHAR(50) NOT NULL CHECK (Name IN ('Health & Wellness', 'Art & Creative Works', 'Education','Tech & Innovation')),
	Icon BLOB(16000000), 
  	PRIMARY KEY (Kategorie_id)
);


CREATE TABLE Konto (
	Konto_name VARCHAR(30) NOT NULL,
	Email VARCHAR(50) NOT NULL,
	Geheimzahl SMALLINT NOT NULL,
	Guthaben DECIMAL(6,2) CHECK (Guthaben >0),
        Sichtbarkeit CHAR(7) CHECK (Sichtbarkeit IN ('public','private')), 
	PRIMARY KEY (Konto_name,Email),
	FOREIGN KEY (Email) REFERENCES Benutzer(Email) ON DELETE CASCADE 
);

CREATE TABLE Projekt (
 	P_nummer SMALLINT NOT NULL AUTO_INCREMENT,
	Kategorie_id SMALLINT NOT NULL,
	Email VARCHAR(50) NOT NULL,
	Titel VARCHAR(20) NOT NULL,
	Successor VARCHAR(50),
	Predecessors VARCHAR(50),
 	Beschreibung TEXT(8000),
	Status CHAR(5) CHECK (Status IN ('open','close')),
	Finanz_limit DECIMAL(6,2),
 	PRIMARY KEY (P_nummer),
        FOREIGN KEY (Kategorie_id) REFERENCES Kategorien(Kategorie_id) ON DELETE CASCADE,
	FOREIGN KEY (Email) REFERENCES Benutzer(Email) ON DELETE CASCADE
);

CREATE TABLE Kommentar (
        Kommentar_id SMALLINT NOT NULL AUTO_INCREMENT,
  	Textnachricht TEXT(8000),
  	Erstellungsdatum DATETIME,
        Sichtbarkeit CHAR(7) CHECK (Sichtbarkeit IN ('public','private')),
  	  PRIMARY KEY (Kommentar_id)
      
);

CREATE TABLE Hinzufügen(
       Email VARCHAR(50) NOT NULL,
       P_nummer SMALLINT NOT NULL,
       Kommentar_id SMALLINT NOT NULL,
       PRIMARY KEY(Email, P_nummer, Kommentar_id),
       FOREIGN KEY (Email) REFERENCES Benutzer(Email) ON DELETE CASCADE,
       FOREIGN KEY (P_nummer) REFERENCES Projekt(P_nummer) ON DELETE CASCADE,
       FOREIGN KEY (Kommentar_id) REFERENCES Kommentar(Kommentar_id) ON DELETE CASCADE
);
       

CREATE TABLE spenden (
 	P_nummer SMALLINT NOT NULL,
	Email VARCHAR(50) NOT NULL,
        Sichtbarkeit CHAR(7) CHECK (Sichtbarkeit IN ('public', 'private')),
        Spendenbetrag DECIMAL(6,2) CHECK (Spendenbetrag > 0), 
        PRIMARY KEY (P_nummer, Email),
	FOREIGN KEY (P_nummer) REFERENCES Projekt(P_nummer) ON DELETE CASCADE,
	FOREIGN KEY (Email) REFERENCES Benutzer(Email) ON DELETE CASCADE
	
);


-- Insert Into:


INSERT INTO Benutzer
	(Email, Name, Profil) 
	values
	('abus@rockmail.com','Anthony Bush','Please support my project.'),
	('bordo@zmail.com', 'Bryan Homer', 'Giving my best.'),
	('ciril@coolmail.com', 'Charles Rill', 'All related to gaming.')
;

INSERT INTO Kategorien
	(Name)
	values
	('Health & Wellness'),
	('Art & Creative Works'),
	('Education'),
	('Tech & Innovation')
;


INSERT INTO Konto
	(Konto_name,Email, Geheimzahl, Guthaben)
	values
	('abus','abus@rockmail.com', 1234, 300.00),
	('bordo','bordo@zmail.com', 4321, 500.00),
	('ciril','ciril@coolmail.com', 5687, 700.00)
;

INSERT INTO Projekt
	(Kategorie_id, Email, Titel, Beschreibung, Finanz_limit, status)
	values
	('1', 'ciril@coolmail.com', 'Art for The People', 'Funding for art equipments donation', 5000.00, 'close'),
	('2','bordo@zmail.com', 'Computers for School', 'providing new computer for schools in the Ruhr area', 1000.00, 'open'),
	('3','ciril@coolmail.com', 'Red Cross Help', 'Medical supply donation for our friends in need', 2000.00, 'open')
;

INSERT INTO Spenden
	(P_nummer,Email, Sichtbarkeit, Spendenbetrag)
	values
	('1','abus@rockmail.com', 'Private', 10),
	('3','abus@rockmail.com', 'Public', 100),
	('2','ciril@coolmail.com', 'Public', 50)	
;

INSERT INTO Kommentar
	(Textnachricht,Sichtbarkeit)
	values
	('Nice Project!!,'private',),
	('Keep up the good work','private'),
	('Very inspiring','private'),
	('Needs more features','public')
;

INSERT INTO Hinzufügen
        (Email, P_nummer, Kommentar_id)
          values
        ('abus@rockmail.com','1','1'),
	('bordo@zmail.com','1','2'),
	('ciril@coolmail.com','1','3');
	



-- Trigger:

CREATE TRIGGER change_status
AFTER INSERT ON Spenden
REFERENCING NEW AS neu
FOR EACH ROW MODE DB2SQL
UPDATE Projekt x
	SET status = 'close'
	WHERE neu.P_nummer = x.p_nummer;
